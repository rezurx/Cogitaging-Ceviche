# GitHub Actions Workflow for Cogitating Ceviche Automation
# This workflow provides an alternative to cron-based automation using GitHub Actions

name: Content Automation

on:
  # Scheduled runs - every 6 hours
  schedule:
    - cron: '0 */6 * * *'
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run even if no new content'
        required: false
        default: false
        type: boolean
      skip_deploy:
        description: 'Skip deployment step'
        required: false
        default: false
        type: boolean

  # Trigger on push to main branch (for manual content updates)
  push:
    branches: [ main ]
    paths:
      - 'content/**'
      - 'ingest_external_articles.py'
      - 'automation_config.yaml'

env:
  HUGO_VERSION: '0.128.0'
  NODE_VERSION: '18'

jobs:
  automation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Fetch full history for git operations
        fetch-depth: 0
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        # Disable cache to avoid potential issues
    
    - name: Setup Hugo
      uses: peaceiris/actions-hugo@v2
      with:
        hugo-version: ${{ env.HUGO_VERSION }}
        extended: true
    
    - name: Setup Node.js (for potential build tools)
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Debug Python environment
      run: |
        echo "Python version:"
        python --version
        echo "Python path:"
        python -c "import sys; print('\n'.join(sys.path))"
        echo "Pip version:"
        pip --version
        echo "Current working directory:"
        pwd
        echo "Available packages before install:"
        pip list | head -10

    - name: Install Python dependencies with debugging
      run: |
        echo "=== Upgrading pip ==="
        python -m pip install --upgrade pip
        
        echo "=== Installing PyYAML with multiple approaches ==="
        # Try multiple package names and installation methods
        pip install PyYAML || echo "PyYAML install failed"
        pip install pyyaml || echo "pyyaml install failed" 
        pip install "PyYAML>=6.0" || echo "PyYAML>=6.0 install failed"
        python -m pip install PyYAML || echo "python -m pip PyYAML failed"
        
        echo "=== Installing from requirements.txt ==="
        pip install -r requirements.txt || echo "requirements.txt install had issues"
        
        echo "=== Verifying installations ==="
        pip list | grep -i yaml || echo "No yaml packages found"
        echo "Testing yaml import:"
        python -c "import sys; import yaml; print('✅ SUCCESS: yaml imported successfully, version:', yaml.__version__)" || python -c "print('❌ FAILED: Cannot import yaml'); import subprocess; result = subprocess.run(['pip', 'list'], capture_output=True, text=True); print('Installed packages:', result.stdout); exit(1)"
    
    - name: Create automation directories
      run: |
        mkdir -p automation_logs
        mkdir -p backups
        mkdir -p .claude/agents
    
    - name: Configure Git
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
    
    - name: Run content ingestion
      id: ingestion
      run: |
        echo "Starting content ingestion..."
        echo "=== Attempting automation_manager.py ==="
        if python automation_manager.py run-once --verbose; then
          echo "✅ automation_manager.py succeeded"
          echo "ingestion_status=0" >> $GITHUB_OUTPUT
        else
          echo "❌ automation_manager.py failed, falling back to simple approach"
          echo "=== Falling back to ingest_external_articles.py ==="
          if python3 ingest_external_articles.py; then
            echo "✅ Fallback ingestion succeeded"
            echo "ingestion_status=0" >> $GITHUB_OUTPUT
          else
            echo "❌ Both approaches failed"
            echo "ingestion_status=1" >> $GITHUB_OUTPUT
          fi
        fi
      continue-on-error: true
    
    - name: Check for new content
      id: content_check
      run: |
        # Check if there are any new or modified content files
        git add -A
        if git diff --staged --quiet; then
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "No new content found"
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "New content detected"
          git status --porcelain
        fi
    
    - name: Commit new content
      if: steps.content_check.outputs.has_changes == 'true'
      run: |
        git add content/
        git commit -m "Automated content update - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "Content committed successfully"
    
    - name: Build site
      if: steps.content_check.outputs.has_changes == 'true' || github.event.inputs.force_run == 'true'
      run: |
        echo "Building Hugo site..."
        hugo --gc --minify --verbose
        echo "Build completed"
    
    - name: Run site tests (optional)
      if: steps.content_check.outputs.has_changes == 'true' || github.event.inputs.force_run == 'true'
      run: |
        # Basic site validation
        if [ ! -d "public" ]; then
          echo "Error: Hugo build failed - public directory not found"
          exit 1
        fi
        
        if [ ! -f "public/index.html" ]; then
          echo "Error: Hugo build failed - index.html not found"
          exit 1
        fi
        
        # Check for broken internal links (basic check)
        if command -v grep &> /dev/null; then
          echo "Checking for obvious build issues..."
          # Look for Hugo error messages in HTML
          if grep -r "ERROR\|WARN" public/ | head -5; then
            echo "Warning: Potential build issues detected"
          fi
        fi
        
        echo "Basic site validation passed"
    
    - name: Deploy to GitHub Pages
      if: |
        (steps.content_check.outputs.has_changes == 'true' || github.event.inputs.force_run == 'true') &&
        github.event.inputs.skip_deploy != 'true' &&
        github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./public
        publish_branch: gh-pages
        force_orphan: true
    
    - name: Create backup
      if: steps.content_check.outputs.has_changes == 'true' || github.event.inputs.force_run == 'true'
      run: |
        # Create a backup of the built site
        timestamp=$(date -u '+%Y%m%d_%H%M%S')
        backup_name="site_backup_${timestamp}.tar.gz"
        tar -czf "backups/${backup_name}" -C public .
        echo "Backup created: ${backup_name}"
        
        # Keep only the last 5 backups to save space
        ls -t backups/site_backup_*.tar.gz | tail -n +6 | xargs -r rm
    
    - name: Generate automation report
      if: always()
      run: |
        echo "# Automation Run Report" > automation_report.md
        echo "" >> automation_report.md
        echo "**Run Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> automation_report.md
        echo "**Workflow:** ${{ github.workflow }}" >> automation_report.md
        echo "**Trigger:** ${{ github.event_name }}" >> automation_report.md
        echo "" >> automation_report.md
        
        if [ "${{ steps.content_check.outputs.has_changes }}" == "true" ]; then
          echo "✅ **New content detected and processed**" >> automation_report.md
        else
          echo "ℹ️ **No new content found**" >> automation_report.md
        fi
        
        if [ "${{ steps.ingestion.outputs.ingestion_status }}" == "0" ]; then
          echo "✅ **Content ingestion successful**" >> automation_report.md
        else
          echo "❌ **Content ingestion failed**" >> automation_report.md
        fi
        
        echo "" >> automation_report.md
        echo "## File Changes" >> automation_report.md
        git diff --name-status HEAD~1 HEAD >> automation_report.md || echo "No changes" >> automation_report.md
    
    - name: Upload automation logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: automation-logs-${{ github.run_number }}
        path: |
          automation_logs/
          automation_report.md
        retention-days: 7
    
    - name: Update automation status
      if: always()
      run: |
        echo "Updating automation status..."
        python automation_manager.py status > automation_status.txt
        cat automation_status.txt
    
    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const title = '🚨 Automation Pipeline Failed';
          const body = `
          The automated content pipeline failed during the latest run.
          
          **Details:**
          - Workflow: ${{ github.workflow }}
          - Run ID: ${{ github.run_id }}
          - Trigger: ${{ github.event_name }}
          - Time: ${{ steps.date.outputs.date }}
          
          Please check the workflow logs for more details.
          `;
          
          // Create an issue (optional - requires issues: write permission)
          try {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['automation', 'bug']
            });
          } catch (error) {
            console.log('Could not create issue:', error.message);
          }

  # Health check job (runs more frequently)
  health-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run health check
      run: |
        python automation_manager.py health-check --verbose
    
    - name: Check site availability
      run: |
        # Check if the deployed site is accessible
        site_url="https://cogitating-ceviche.com"
        if curl -f -s -I "$site_url" > /dev/null; then
          echo "✅ Site is accessible: $site_url"
        else
          echo "⚠️ Site may not be accessible: $site_url"
        fi